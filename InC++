template<typename T>

class QueuUsingArray {
	T *data;
	int nextIndex;
	int firstIndex;
	int size;
	int capacity;

public:
	QueuUsingArray(int s){
		data=new T[s];
		nextIndex=0;
		firstIndex=-1;
		size=0;
		capacity=s;
	}


	int getSize(){
		return size;
	}

	 bool isEmpty(){
	 	return size==0;
	 }

	 void enqueue(T element){

	 	if(size==capacity){
	 		cout<<"Queue is Full"<<endl;
	 		return;
	 	}
        data[nextIndex]=element;
        nextIndex=(nextIndex+1)%capacity;
        if(firstIndex==-1){
        	firstIndex=0;
        }
        size++;

	 }

    T front(){

        if(isEmpty()){
        	cout<<Queue is Full<<endl;
        	return 0;
        }

        T ans=data[firstIndex];
        
        return ans;


    }

    T dequeue(){
       
       if(isEmpty()){
       	cout<<Queue is Full<<endl;
       	return 0;
       }


       T ans=data[firstIndex];
       firstIndex=(firstIndex+1)%capacity;
       
       size--;
       if(size==0){
          firstIndex=0;
          nextIndex=0;
       }

       return ans;




    }



}
